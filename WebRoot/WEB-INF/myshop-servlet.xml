<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <!--  关联  properties 文件使用mysql数据库 -->
    <context:property-placeholder location="classpath:dbsqlserver.properties" />

    <!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射-->
    <mvc:annotation-driven/>

    <!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
    <context:component-scan base-package="com.gt.myshop"/>

    <!-- 对模型视图名称的解析，在请求时模型视图名称添加前后缀 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
    <!-- 以下为配置 MyBatis -->
    <!-- 数据源 -->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource"
          p:driverClassName="${driver}"
          p:url="${url}"
          p:username="${name}"
          p:password="${password}"/>

    <!--
	    class:  指定用来创建 sqlSession  的工厂
	    dataSource-ref:  使用的数据源
	    typeAliasesPackage:  自动扫描的实体类包
    -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="dataSource"
          p:mapperLocations="classpath:com/gt/myshop/mapper/*.xml"
          p:typeAliasesPackage="com.gt.myshop.entities"/>

    <!--
    class : 指定自动扫描  xxxMapper.xml 映射文件的类
    basePackage:  自动扫描的配置包
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.gt.myshop.mapper"
          p:sqlSessionFactoryBeanName="sqlSessionFactory"/>

    <!--  事务管理 -->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>

    <!-- 配置使用 SimpleMappingExceptionResolver 来映射异常 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionAttribute" value="ex"></property>
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.ArrayIndexOutOfBoundsException">error</prop>
            </props>
        </property>
    </bean>
    
    <mvc:default-servlet-handler/>
    
    <!-- 
    	Spring配置文件中实现 AOP 配置，首先定义切入点 
    	与 AOP 相关的配置都放在 <aop:config> 标签中，如配置切入点的标签 <aop:pointcut>
    	<aop:pointcut> 的 execution 属性可以配置切入点，
    	例如： execution(public void addNewUser(entity.User))
    	execution 是切入点指示符，他的括号中是一个切入点表达式，可以配置要切入的方法，切入点表达式支持模糊查询，以下为集中常用的模糊匹配
    	》public * addNewUser(entity.User) : * 表示匹配所有类型的返回值
    	》public void *(entity.User): * 表示匹配所有的方法名
    	》public void addNewUser(..): ".." 表示匹配所有参数个数和类型
    	》* com.bdqn.service.*.*(..): 这个表达式匹配 com.bdqn.service 包下所有类的所有方法
    	》* com.bdqn.service..*.*(..): 这个表达式匹配 com.bdqn.service 包及其子包下所有类的所有方法
    	
    	切入点配置完成后，还需要在切入点处插入增强处理，这个过程的专业叫法是 "织入"。
    -->
    
    <!--  
    		配置文件需要导入 aop 命名空间。只需要在配置文件中添加 <aop:aspectj-autoproxy/> 元素，就可以启用对于 @AspectJ 注解的支持
    	Spring 将自动为匹配的 Bean 创建代理
    -->
    <aop:aspectj-autoproxy/>
    
    <!--  
    	通过实现 Spring 的特定接口实现增强效果，需要配置的切入点和织入操作
    	<aop:config>
    	<aop:pointcut expression="execution(* com.gt.myshop..*.*(..))" id="pointCut"/>
    	// 
    		通过 <aop:advisor> 标签，将增强处理和切入点结合在一起，很明显的 UserBiz 的 addNewUser() 方法可以匹配 pointCut 切入点， Spring
    		会生成代理对象在他执行前后分别调用 before() 和 afterReturning() 方法，这样就完成了日志输出
    	<aop:advisor pointcut-ref="pointCut" advice-ref="errorLogger" />
		<aop:advisor pointcut-ref="pointCut" advice-ref="aroundLogger"/>
    	//
    	<aop:advisor pointcut-ref="pointCut" advice-ref="loggerAfterReturning"/>
    	<aop:advisor pointcut-ref="pointCut" advice-ref="loggerBefore"/>
    	
    	</aop:config>
    -->
    
    <!-- ****************************************  使用Hibernate 框架的解决方案  **************************************** -->
    
    <!--以下为配置 Hibernate 框架的解决方案 -->
    <!--  数据源 
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource"
          p:driverClassName="${driver}"
          p:url="${url}"
          p:username="${name}"
          p:password="${password}"/>
    -->

    <!-- 配置 SessionFactory 
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		 配置自动扫描的实体类 
		<property name="packagesToScan"  value="com.gt.myshop.entities"/>
	</bean>
	-->
	<!-- 配置 Spring 的声明式事务 -->
	<!-- 1. 配置 hibernate 的事务管理器 
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	-->
	<!-- 2. 配置事务属性 
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			以get开头的方法都是只读的
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	-->
	<!-- 3. 配置事务切入点, 再把事务属性和事务切入点关联起来 
	<aop:config>
		<aop:pointcut expression="execution(* com.gt.myshop.service.*.*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	-->
	<!-- 以上为配置 Hibernate 框架的解决方案 -->
</beans>